# This is a basic workflow to help you get started with Actions

name: Create Release

# Controls when the workflow will run
on:
  push:
    branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  auto-gen-tag:
    name: Auto Generate Tag
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.gen-tag-step.outputs.tagname }}
    steps:
      # - uses: actions/checkout@v5
      # - uses: jacopocarlini/action-autotag@3.0.0
      #   id: gen-tag-step
      #   with:
      #     GITHUB_TOKEN: '${{ secrets.GITHUB_TOKEN }}'
      #     tag_prefix: 'v'
      - name: Extrair versão do pubspec.yaml
        id: extract_version
        run: |
          # Usa sed para pegar a versão no pubspec.yaml (exemplo: version: 1.2.3+4)
          VERSION=$(grep '^version:' pubspec.yaml | awk '{print $2}' | sed 's/+/-/g')
          echo "Versão extraída: $VERSION"
          
          # Salva a versão extraída como variável de ambiente
          echo "version=$VERSION" >> $GITHUB_ENV

      - name: Verificar se a Tag Já Existe
        id: check_tag
        run: |
          # Verifica se a tag já existe
          TAG="v${{ env.version }}"
          EXISTING_TAG=$(git tag -l "$TAG")
          
          if [ -n "$EXISTING_TAG" ]; then
            echo "A tag $TAG já existe. Interrompendo o fluxo."
            exit 1  # Interrompe o fluxo se a tag já existir
          else
            echo "A tag $TAG não existe. Continuando o fluxo."
          fi

      - name: Criar e Push da Tag
        id: create_tag
        run: |
          # Cria uma tag com base na versão extraída
          TAG="v${{ env.version }}"
          git tag "$TAG"  # Exemplo: cria a tag v1.2.3
          
          # Empurra a tag para o repositório remoto
          git push origin "$TAG"

          # Adiciona a tag como output
          echo "::set-output name=tagname::$TAG"  # Define o output "tagname" com o valor da tag criada

      - name: Confirmar Tag Criada
        run: |
          # Lista as tags para confirmar que a tag foi criada
          git tag

      - name: Exibir o Nome da Tag Criada
        run: |
          echo "A tag criada é: ${{ steps.create_tag.outputs.tagname }}"

  generate-changelog:
    if: ${{ startsWith(needs.auto-gen-tag.outputs.tag, 'v') }}
    name: Generate changelog
    needs: auto-gen-tag
    runs-on: ubuntu-latest
    steps:
      - name: Get latest published release tag
        id: get_latest_release
        uses: pozetroninc/github-action-get-latest-release@v0.7.0
        with:
          repository: ${{ github.repository }}
          excludes: prerelease, draft
      - name: Generate changelog since last published release
        uses: charmixer/auto-changelog-action@5c6320ae4dedc8743e4439a3c56294c294553fb9
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          future_release: ${{ needs.auto-gen-tag.outputs.tag }}
          since_tag: ${{ steps.get_latest_release.outputs.release }}
      - name: Upload changelog
        uses: actions/upload-artifact@v4
        with:
          name: changelog
          path: CHANGELOG.md

  # This workflow contains a single job called "build"
  create-release:
    name: Draft Github release
    needs: [auto-gen-tag, generate-changelog]
    runs-on: ubuntu-latest
    steps:
      - run: echo ${{needs.auto-gen-tag.outputs.tag}}
      - name: Download changelog
        uses: actions/download-artifact@v5
        with:
          name: changelog
      - name: Draft release with changelog
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ needs.auto-gen-tag.outputs.tag }}
          release_name: Grex DS ${{ needs.auto-gen-tag.outputs.tag }}
          body_path: CHANGELOG.md
          draft: false
          prerelease: false
